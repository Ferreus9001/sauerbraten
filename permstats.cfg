// File:		permstats.cfg
// Author:		FerreusRemedium
// Created:		2013-03-13
// Last Change: 2013-03-15





// ==================
//  Helper Functions
// ==================


createine = [ if (=s (getalias $arg1) "") [ $arg1 = $arg2 ] ]

+= = [ $arg1 = (+ (getalias $arg1) $arg2); result $$arg1 ]
++ = [ $arg1 = (+ (getalias $arg1) 1); result $$arg1 ]

// Checks whether the gametype is neither insta nor effic.
_ps_m_normal = [ && [! (m_insta $arg1)] [! (m_efficiency $arg1)] ]

// Ensures 2 digits by prepending zeros.
_ps_zeros = [ concatword (? (< $arg1 10) 0) $arg1 ]
_ps_zeros2 = [ concatword (loopconcatword i (- $arg2 (strlen $arg1)) [result 0]) $arg1 ]

// TODO remove old dummy
_ps_display_dummy = [if (&& [!= $arg1 0] [!=s $arg1 ""]) [ result $arg1 ] [ result $_ps_nostats_string ]]
_ps_display_dummy2 = [
	arg3 = $(_ps_getprefixvarname $arg1 $arg2)
	//if (&& [!= $arg3 0] [!=s $arg3 ""]) [ result $arg3 ] [ result $_ps_nostats_string ]
	if $arg3 [ result $arg3 ] [ result $_ps_nostats_string ]
]

// /_ps_round <F>
// Rounds float F to int.
_ps_round = [
	if (>= $arg1 0) [
		+ (+f $arg1 0.5) 0
	] [
		+ (-f $arg1 0.5) 0
	]
]

// /_ps_round <F> <MUL>
// Rounds float F to a number of places.
// F:     The number.
// MUL:   10 to the number of places'th power. (e.g. 100 for 2 places)
_ps_round2 = [
	divf (_ps_round (*f $arg1 $arg2)) $arg2
]


// /_ps_getstrtimesub <SECONDS> <SUFFIX> <DIV> [<MOD>] [<N>]
// Returns ((SECONS / DIV) % MOD) and appends SUFFIX.
// If the number without MOD equals or is greater than DIV, it ensures N digits (default: 2).
// If the number is zero, it returns an empty string.
// If MOD is omitted or 0 it counts as a really big number.
_ps_getstrtimesub = [
	local s
	if (< $arg1 $arg3) [
		result ""
	] [
		if $arg4 [
			if (>= $arg1 (* $arg3 $arg4)) [
				concatword (_ps_zeros2 (mod (div $arg1 $arg3) $arg4) (|| [result $arg5] [result 2])) $arg2
			] [
				concatword (mod (div $arg1 $arg3) $arg4) $arg2
			]
		] [
			concatword (div $arg1 $arg3) $arg2
		]
	]
]

// /_ps_getstrtime <SECONDS>
// Returns a string-representation of a time.
// SECONDS: The time in seconds.
_ps_getstrtime = [
	// TODO this is crazy. maybe not optimal.
	//concatword (_ps_getstrtimesub $arg1 "y" 31536000) (_ps_getstrtimesub $arg1 "d" 86400 365 1) (_ps_getstrtimesub $arg1 "h" 3600 24 1) (_ps_getstrtimesub $arg1 "m" 60 60) (_ps_getstrtimesub $arg1 "s" 1 60)
	concatword (_ps_getstrtimesub $arg1 "h" 3600 24 1) (_ps_getstrtimesub $arg1 "m" 60 60) (_ps_getstrtimesub $arg1 "s" 1 60)
]




// =======
//  Lists
// =======



// Normal counters
// Shall not be changed after exec
//                   0        1         2          3               4              5             6        7           8
_ps_list_counters = "getfrags getdeaths _ps_gettks _ps_getsuicides gettotaldamage gettotalshots getflags _ps_gettime _ps_getroundcount"
// Functions called to display the counters
_ps_list_displays         = "Frags: Deaths: Tks: Suicides: Damage: Shots: Scores: Time:        Games: Accuracy:        KpD:        KpM:"
_ps_list_displays_getters = "#0     #1      #2   #3        #4      #5     #6      _ps_disptime #8     _ps_dispaccuracy _ps_dispkpd _ps_dispkpm"

// Gamemode filters
_ps_list_filters = "ffa team . normal . edit . insta . effic . ctf . protect . collect . hold . capture . regen . tactics mp sp"
_ps_list_filters_checks = "m_teammode m_edit _ps_m_normal m_insta m_efficiency m_ctf m_protect m_collect m_hold m_capture m_regencapture m_tactics m_sp"

// Included gamemodes
_ps_list_modes = "-3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22"
// not used yet
_ps_list_modes_names = "sp dmsp demo ffa edit teamplay instagib instateam effic efficteam tactics tacteam capture regen ctf instactf protect instaprotect hold instahold efficctf efficprotect effichold collect instacollect efficcollect"

// teammodes:   ffa teamplay
// teamplay:    none ctf protect hold collect
// gearmodes:   none insta effic
// uniqueffa:   tactics
// uniqueteam:  tacteam capture regen

createine _ps_last_isconnected (isconnected)
createine _ps_last_mode (getmode)
createine _ps_last_mapname (mapname)
createine _ps_last_timeremaining (timeremaining)
createine _ps_last_deaths (getdeaths)

createine _ps_stats_roundindex 0
createine _ps_apply_current_game 1

createine _ps_current_tks 0
createine _ps_current_suicides 0

_ps_pollinterval = 100
_ps_tkpollinterval = 20

_ps_nostats_string = "-"





// ==============================
//  Teamkill and Suicide polling
// ==============================



// stop already running versions
_ps_polltksd = []
sleep (* 2 $_ps_tkpollinterval) [
	// polls frags and deaths to count tks
	_ps_polltksd = [
		sleep $_ps_tkpollinterval [
			local fcmp
			fcmp = (- @(getfrags) (getfrags))
			if (> $fcmp 0) [
				local dcmp
				dcmp = (- (getdeaths) @@(getdeaths))
				//echo fcmp= $fcmp dcmp= $dcmp
				if (&& [>= $dcmp 0] [<= (timeremaining) @@@(timeremaining)]) [ // in case the game has ended
					+= _ps_current_suicides $dcmp
					+= _ps_current_tks (- $fcmp $dcmp)
					_ps_addstats START (indexof $_ps_list_counters "getfrags") (- 0 $fcmp)
					echo suicides: $_ps_current_suicides  tks: $_ps_current_tks
				]
			]
			_ps_polltksd
		]
	]
	_ps_polltksd
]





// =================
//  Special getters
// =================



// returns tks counted by _ps_polltksd
_ps_gettks = [
	$_ps_current_tks
]
// returns suicides counted by _ps_polltksd
_ps_getsuicides = [
	$_ps_current_suicides
]

_ps_gettime = [
	if (isconnected) [- 0 (timeremaining)] [result 0]
]

// /_ps_getroundcount
// Returns whether the game has been longer than 60 seconds.
_ps_getroundcount = [
	> (_ps_getstats_tmp @(indexof $_ps_list_counters "_ps_gettime")) 60
	// check does not work when START is applied. this resets it. hax pls.
	@(_ps_getcountername START (indexof $_ps_list_counters "_ps_getroundcount")) =
]
createine _ps_roundindex_last -1





// ================
//  Stats counting
// ================


// /_ps_getprefixvarnames <PREFIX>
// Returns names for all counters with given prefix
_ps_getprefixvarnames = [
	// TODO use _ps_getprefixvarname
	loopconcat c (listlen $_ps_list_counters) [concatword $arg1 _ $c]
]

// /_ps_getcountername <PREFIX> <COUNTER>
// Returns a variable name of a counter with given prefix.
// PREFIX   Prefix of the variable.
// TAG:     The tag or gamemode id.
// COUNTER: The counter index.
_ps_getprefixvarname = [
	concatword $arg1 _ $arg2
]

// /_ps_prefixvarstolist <PREFIX>
_ps_prefixvarstolist = [
	loopconcat c (listlen $_ps_list_counters) [
		$(_ps_getprefixvarname $arg1 $c)
	]
]

// /_ps_getcountername <TAG> <COUNTER>
// Returns the variable name of a counter.
// TAG:     The tag or gamemode id.
// COUNTER: The counter index.
_ps_getcountername = [
	concatword _ps_stats_ $arg1 _ $arg2
]

// /_ps_addstats <TAG> <COUNTER> <VALUE>
// Adds a value to a counter.
// TAG:     The tag or gamemode id.
// COUNTER: The counter index.
// VALUE:   The value to add.
_ps_addstats = [
	if $arg3 [
		local varname
		varname = (_ps_getcountername $arg1 $arg2)
		+= $varname $arg3
	]
]

// /_ps_setstats <TAG> <COUNTER> <VALUE>
// Sets a counter to a value.
// TAG:     The tag or gamemode id.
// COUNTER: The counter index.
// VALUE:   The value to add.
_ps_setstats = [
	local varname
	varname = (_ps_getcountername $arg1 $arg2)
	if (|| $arg3 (getalias $varname)) [
		$varname = $arg3
	]
	if (getalias $varname) [] [$varname = ""]
]

// /_ps_getstats <MODE> <COUNTER>
// Returns value of a counter or 0 if it does not exist yet
// Same args as /_ps_getcountername
_ps_getstats = [
	result (|| [result (getalias (_ps_getcountername $arg1 $arg2))] [result 0])
]

// /_ps_getstats_tmp <COUNTER>
// Returns COUNTER for the game after _ps_apply was called.
_ps_getstats_tmp = [
	result (- (_ps_getstats TMP $arg1) (_ps_getstats START $arg1))
]

// /_ps_changedgame
// checks whether the last game has ended
// FIXME
// Does not return 1 if the game is changed when all are true:
//  1. The game is switched directly without leaving the game to the main menu
//  2. The time remaining in the new game is less than in the old game
//  3. The player did not have any deaths in the old game
//  4. The new game is on the same mode as the old game
_ps_changedgame = [
	//|| [|| [!= (isconnected) $_ps_last_isconnected] [> (timeremaining) $_ps_last_timeremaining]] [|| [< (getdeaths) $_ps_last_deaths] [!=s $mapname $_ps_last_mapname]]
	result (|| [result (|| [result (!= (isconnected) $_ps_last_isconnected)] [result (> (timeremaining) $_ps_last_timeremaining)])] [result (|| [result (< (getdeaths) $_ps_last_deaths)] [result (!= (getmode) $_ps_last_mode)])])
]

// /_ps_savegameinfo
// saves information about current match for /_ps_changedgame
_ps_savegameinfo = [
	_ps_last_mode = (getmode)
	_ps_last_isconnected = (isconnected)
	_ps_last_mapname = (mapname)
	_ps_last_timeremaining = (timeremaining)
	_ps_last_deaths = (getdeaths)
]

// /_ps_prefixloopdisplays <VARCAPTION> <VARDISP> <PREFIX> <A>
_ps_prefixloopdisplays = [
	do [
		local list $arg1 $arg2 @(loopconcat i (listlen $_ps_list_counters) [concatword # $i])
		loop i (listlen $_ps_list_counters) [
			(concatword # $i) = (concatword _ps_display_dummy2 " ^"" $arg3 "^" " $i)
		]
		//list = (_ps_prefixvarstolist $arg3)
		loopconcatword d (listlen $_ps_list_displays) [
			$arg1 = (at $_ps_list_displays $d)
			$arg2 = ((at $_ps_list_displays_getters $d) $arg3)
			arg4
		]
	]
]

// /_ps_apply
// adds temporary counters to permanent counters
_ps_apply = [
	local varname addit s @(_ps_getprefixvarnames end)
	addit = (>= (indexof $_ps_list_modes $_ps_last_mode) 0)
	echo addit= $addit mode= $_ps_last_mode
	if $addit [
		loop c (listlen $_ps_list_counters) [
			varname = (_ps_getprefixvarname end $c)
			//$varname = (- (_ps_getstats TMP $c) (_ps_getstats START $c))
			$varname = (_ps_getstats_tmp $c)
			if $_ps_apply_current_game [
				_ps_addstats $_ps_last_mode $c $$varname
				// XXX DEBUG
				echo _ps_addstats $_ps_last_mode $c "(-" (_ps_getstats TMP $c) (_ps_getstats START $c) ")=" $$varname
			]
		]
		echo (concatword "^f0Stats of last match:" (_ps_prefixloopdisplays caption disp end [
			if (!=s $disp $_ps_nostats_string) [
				result (concatword $s " " $caption " ^fs^f2" $disp "^fr")
			]
		]))
		_ps_apply_current_game = 1
	]
]

// /_ps_apply_tmp <TAG>
// saves current match stats to temporary vars
// TAG: TMP or START
_ps_apply_tmp = [
	loop i (listlen $_ps_list_counters) [
		_ps_setstats $arg1 $i ((at $_ps_list_counters $i))
	]
]

_ps_resetcounters = [
	loop i (listlen $_ps_list_counters) [
		_ps_setstats START $i 0
		_ps_setstats TMP $i 0
	]
]

// /_ps_onroundended
// Called after a game has ended.
_ps_onroundended = [
	echo "round ended"
	_ps_apply
	++ _ps_stats_roundindex
	_ps_current_tks = 0
	_ps_current_suicides = 0
	_ps_updategui
	//_ps_resetcounters
	_ps_apply_tmp START
]

// /_ps_onstatscheck
// Called repeatedly during the game.
_ps_onstatscheck = [
	_ps_savegameinfo
	_ps_apply_tmp TMP
]

// /_ps_pollstatsd
// Calls /_ps_onroundended when a round has ended and
// keeps calling /_ps_onstatscheck repeatedly.
_ps_pollstatsd = [] // stop already running versions
sleep (* 2 $_ps_pollinterval) [
	_ps_pollstatsd = [
		if (_ps_changedgame) [
			_ps_onroundended
		]
		_ps_onstatscheck
		sleep $_ps_pollinterval [_ps_pollstatsd]
	]
	_ps_pollstatsd
]





// ===================
//  Display Functions
// ===================


// /_ps_disptime <PREFIX>
_ps_disptime = [
	arg2 = (_ps_getstrtime $(_ps_getprefixvarname $arg1 (indexof $_ps_list_counters "_ps_gettime")))
	if (!=s $arg2 "") [
		result $arg2
	] [
		result $_ps_nostats_string
	]
]

// /_ps_calcaccuracy <PREFIX>
// Returns accuracy.
// COUNTERLIST: List of total counters in same order as in _ps_list_counters_getters.
_ps_dispaccuracy = [
	local damage shots
	damage = $(_ps_getprefixvarname $arg1 (indexof $_ps_list_counters "gettotaldamage"))
	if $damage [
		shots = $(_ps_getprefixvarname $arg1 (indexof $_ps_list_counters "gettotalshots"))
		concatword (_ps_round (*f (divf $damage $shots) 100)) "%"
	] [
		result $_ps_nostats_string
	]
]

// /_ps_calckpd <COUNTERLIST>
// Returns frags per death.
// COUNTERLIST: List of total counters in same order as in _ps_list_counters_getters.
_ps_dispkpd = [
	local frags deaths
	frags = $(_ps_getprefixvarname $arg1 (indexof $_ps_list_counters "getfrags"))
	if $frags [
		deaths = $(_ps_getprefixvarname $arg1 (indexof $_ps_list_counters "getdeaths"))
		_ps_round2 (divf $frags (max $deaths 1)) 100
	] [
		result $_ps_nostats_string
	]
]

// /_ps_calckpm <COUNTERLIST>
// Returns frags per minute.
// COUNTERLIST: List of total counters in same order as in _ps_list_counters_getters.
_ps_dispkpm = [
	local frags minutes
	//frags = (at $arg1 (indexof $_ps_list_counters "getfrags"))
	frags = $(_ps_getprefixvarname $arg1 (indexof $_ps_list_counters "getfrags"))
	if $frags [
		//minutes = (divf (at $arg1 (indexof $_ps_list_counters "_ps_gettime")) 60)
		minutes = (divf $(_ps_getprefixvarname $arg1 (indexof $_ps_list_counters "_ps_gettime")) 60)
		_ps_round2 (divf $frags (maxf $minutes 0.01)) 100
	] [
		result $_ps_nostats_string
	]
]





// ===========
//  GUI stuff
// ===========



createine _ps_filter_enabled 0

// total stats gui
newgui _ps_total [
	local total
	loop c (listlen $_ps_list_counters) [
		guilist [
			guitext (at $_ps_list_counters $c)
			total = 0
			looplist m $_ps_list_modes [
				+= total (_ps_getstats $m $c)
			]
			guitext $total
		]
	]
] "total"

newgui _ps_current [
	local @(_ps_getprefixvarnames current)
	loop c (listlen $_ps_list_counters) [
		(_ps_getprefixvarname current $c) = (_ps_getstats_tmp $c)
	]
	_ps_prefixloopdisplays caption disp current [
		guilist [
			guitext $caption 0
			guispring
			guitext $disp 0
		]
	]
	guicheckbox "save current game" _ps_apply_current_game 1 0 [_ps_updategui]
	guibutton "back" [cleargui 1]
] "current"

_ps_getfiltervarname = [
	concatword _ps_filter_ $arg1 _ $arg2
]

// /_ps_guifilter <INDEX>
// Adds filter controls to the gui.
_ps_guifilter = [
	local ctrls falsetext truetext
	falsetext = (at $_ps_list_filters (<< $arg1 1))
	truetext = (at $_ps_list_filters (+ (<< $arg1 1) 1))
	createine (_ps_getfiltervarname $arg1 0) 0

	ctrls = [guicheckbox "on" @(_ps_getfiltervarname $arg1 0) 1 0 [_ps_updategui]]
	if (&& [!=s $truetext "."] [!=s $falsetext "."]) [
		createine (_ps_getfiltervarname $arg1 1) 1
		ctrls = (concat $ctrls [
			guistrut 2
			guiradio @falsetext @(_ps_getfiltervarname $arg1 1) 0 [
				(_ps_getfiltervarname @@arg1 0) = 1
				_ps_updategui
			]
			guistrut 2
			guiradio @truetext @(_ps_getfiltervarname $arg1 1) 1 [
				(_ps_getfiltervarname @@arg1 0) = 1
				_ps_updategui
			]
		])
	] [
		if (!=s $falsetext ".") [
			createine (_ps_getfiltervarname $arg1 1) 1
			ctrls = (concat $ctrls [
				guistrut 2
				guicheckbox @falsetext @(_ps_getfiltervarname $arg1 1) 0 1 [
					(_ps_getfiltervarname @@arg1 0) = 1
					_ps_updategui
				]
			])
		]
		if (!=s $truetext ".") [
			createine (_ps_getfiltervarname $arg1 1) 0
			ctrls = (concat $ctrls [
				guistrut 2
				guicheckbox @truetext @(_ps_getfiltervarname $arg1 1) 1 0 [
					(_ps_getfiltervarname @@arg1 0) = 1
					_ps_updategui
				]
			])
		]
	]
	result $ctrls
]
// /_ps_guifiltercontrols
// Adds controls for all filters to the gui.
_ps_guifiltercontrols = [
	loopconcat c (listlen $_ps_list_filters_checks) [
		result [guilist [ @@(_ps_guifilter $c) ];]
	]
]

_ps_checkfilter = [
	if $_ps_filter_enabled [
		local useit
		useit = 1
		loop i (listlen $_ps_list_filters_checks) [
			if $useit [
				if $(_ps_getfiltervarname $i 0) [
					useit = (= $(_ps_getfiltervarname $i 1) ((at $_ps_list_filters_checks $i) $arg1))
				]
			]
		]
		$useit
	] [
		result 1
	]
]

// _ps_gettotalfiltered <COUNTER>
// returns total value of COUNTER filtered by gui controls
_ps_gettotalfiltered = [
	local useit total
	looplist m $_ps_list_modes [
		if (_ps_checkfilter $m) [
			// TODO add current stats if (= $m (getmode))
			// derp, gui does not get updated (yet)
			if $_ps_apply_current_game [
				if (= $m (getmode)) [
					+= total (- (_ps_getstats TMP $arg1) (_ps_getstats START $arg1))
				]
			]
			+= total (_ps_getstats $m $arg1)
		]
	]
	|| $total 0
]

// /_ps_guistatscontrols
// Adds contols for all counters to the gui.
_ps_guistatscontrols = [
	do [
		local . i varname list @(_ps_getprefixvarnames total)
		loop c (listlen $_ps_list_counters) [
		   varname = (_ps_getprefixvarname total $c)
		   $varname = (_ps_gettotalfiltered $c)
		]

		_ps_prefixloopdisplays caption disp total [
			result [guilist [
				guitext @@caption 0
				guispring
				guitext @@(concatword "^"" $disp "^"") 0
			];]
		]
	]
]

// /_ps_creategui
// Creates the gui and returns the body.
_ps_creategui = [
	result [ guistayopen [
		guilist [
			guispring
			guicheckbox "filter" _ps_filter_enabled 1 0 [_ps_updategui]
			guispring
		]
		guilist [
			@@@(if $_ps_filter_enabled [
				result [
					guilist [
						@@(_ps_guifiltercontrols)
						guistrut 1
						guibutton "current" [showgui _ps_current]
					]
					guibar
				]
			])
			guilist [
				@@@@(_ps_guistatscontrols)
				guistrut 1
				guicheckbox "save current game" _ps_apply_current_game 1 0 [_ps_updategui]
				guibutton "refresh" [_ps_updategui]
			]
		]
	]]
]

// /_ps_updategui
// Recreates the gui.
_ps_updategui = [
	newgui _ps_filtered (_ps_creategui) "permstats"
]
_ps_updategui

// /permstats
// Updates and shows the gui.
permstats = [ _ps_updategui; showgui _ps_filtered ]

// vim:set sw=4 ts=4 sts=0 noet sta sr ft=cube fdm=syntax:
