// File:        playernamecomplete.cfg
// Author:      FerreusRemedium
// Created:     2013-02-20
// Last Change: 2013-09-29

// thanks to RaZgRiZ for the command flags & loopchar tutorial

// allowed chars that are not in replacechars
_pnc_allowedchars = "1234567890<>:.,_-+~#^^"

// see _pnc_cleanstring
// Special chars could be added here so you can type their simpler version...
// chars that shall be replaced
_pnc_searchchars  = "ETAOINSRHDLUCMFYWGPBVKXQJZ"
// replacement chars
_pnc_replacechars = "etaoinsrhdlucmfywgpbvkxqjz"

// ensure replacechars are allowed or evil things will happen
_pnc_allowedchars = (concatword $_pnc_replacechars $_pnc_allowedchars)

createine _pnc_list_clantags [
	"!s]"
	"-JK-"
	"-NC-"
	"=DK="
	"AFK>"
	"Clan|"
	"CrApp>"
	"Crowd>"
	"DS|"
	"EMT||"
	"Fan|"
	"ICC|"
	"KT|"
	"TIF|"
	"TM|"
	"TUR!"
	"ToP|"
	"WP|"
	"WS|"
	"[CMN]"
	"[DSL]"
	"[FD]"
	"[FR]"
	"[GLX]"
	"[KS]"
	"[LS]"
	"[MH]"
	"[ONI]"
	"[SX]"
	"[TQ]"
	"[mVa]"
	"[tBMC]"
	"s9|"
	"vaQ'"
	"{BO}"
	"{BS}"
	"{Ca}"
	"{DF}"
	"{GFW}"
	"{SoS}"
	"|BoB|"
	"|DM|"
	"|Dp|"
	"|EC|"
	"|ER|"
	"|HFP|"
	"|LS|"
	"|OSH|"
	"|RB|"
	"|SK|"
	"|SX|"
	"|noVI:"
	"}JG{"
	"}TC{"
]

_pnc_tag_delim = "~"

_pnc_loopchar = [
	loop $arg1 (strlen $arg2) [
		$arg1 = (substr $arg2 $$arg1 1)
		arg3
	]
]

// _pnc_cleanstring <STRING>
// Return <STRING> cleaned using _pnc_allowedchars,
// _pnc_searchchars and _pnc_replacechars.
_pnc_cleanstring = [
	local c pos i
	pos = 0
	while [< $pos (strlen $arg1)] [
		c = (substr $arg1 $pos 1)
		i = (strstr $_pnc_searchchars $c)
		if (>= $i 0) [
			arg1 = (strreplace $arg1 $c (substr $_pnc_replacechars $i 1))
			pos = (+ $pos 1)
		] [
			if (< (strstr $_pnc_allowedchars $c) 0) [
				arg1 = (strreplace $arg1 $c)
				// do not increase p, current char is deleted
			] [
				pos = (+ $pos 1)
			]
		]
	]
	result $arg1
]

_pnc_getprivilege = [ || [* (isadmin $arg1) 2] [ismaster $arg1] ]
_pnc_isenemy = [ || [! (m_teammode (getmode))] [!=s (getclientteam $arg1) (getclientteam (getclientnum))] ]

// _pnc_getcondition <FLAG>
// Returns a block which performs the check described by FLAG on client $cn when executed.
//
// Flags:
//   s/S  -  spectator/not spectator
//   b/B  -  bot/not bot
//   i/I  -  ignored/not ignored
//   e/E  -  enemy/not enemy
//   p/P  -  current player/not current player
//   f/F  -  followed player/not followed player
//   m/M  -  master or admin/not master and not admin
//   a/A  -  admin/not admin
//   l/L  -  lower privilege/higher or equal privilege than player
//   h/H  -  higher privilege/lower or equal privilege than player
_pnc_getcondition = [
	cases $arg1 "s" [
		result [[! (isspectator $cn)]]
	] "S" [
		result [[isspectator $cn]]
	] "b" [
		result [[! (isai $cn)]]
	] "B" [
		result [[isai $cn]]
	] "i" [
		result [[! (isignored $cn)]]
	] "I" [
		result [[isignored $cn]]
	] "e" [
		result [[! (_pnc_isenemy $cn)]]
	] "E" [
		result [[_pnc_isenemy $cn]]
	] "p" [
		result [[!= $cn (getclientnum)]]
	] "P" [
		result [[= $cn (getclientnum)]]
	] () [
		cases $arg1 "f" [
			result [[!= $cn (getfollow)]]
		] "F" [
			result [[= $cn (getfollow)]]
		] "m" [
			result [[! (|| [ismaster $cn] [isadmin $cn])]]
		] "M" [
			result [[|| [ismaster $cn] [isadmin $cn]]]
		] "a" [
			result [[! (isadmin $cn)]]
		] "A" [
			result [[isadmin $cn]]
		] "l" [
			result [[>= (_pnc_getprivilege $cn) (_pnc_getprivilege (getclientnum))]]
		] "L" [
			result [[< (_pnc_getprivilege $cn) (_pnc_getprivilege (getclientnum))]]
		] "h" [
			result [[>= (_pnc_getprivilege $cn) (_pnc_getprivilege (getclientnum))]]
		] "H" [
			result [[< (_pnc_getprivilege $cn) (_pnc_getprivilege (getclientnum))]]
		] () [
			error "Unknown flag:" $arg1
		]
	]
]

// _pnc_getconditions <FLAGS>
// Returns a list for all checks in FLAGS.
_pnc_getconditions = [
	local list
	list = [||]
	loop c (strlen $arg1) [
		c = (substr $arg1 $c 1)
		list = (concat $list (_pnc_getcondition $c))
	]
	result $list
]

// old function
_pnc_checkplayer =

// _pnc_removeclantag <CN>
_pnc_removeclantag = [
	listfind i $_pnc_list_clantags [
		if (= (strstr $arg1 $i) 0) [
			arg1 = (substr $arg1 (strlen $i))
			1
		]
	]
	result $arg1
]

// _pnc_getplayers <FLAGS>
// Returns a list of all players, filtered using <FLAGS>.
_pnc_getplayers = [
	local list checks pn pn2
	checks = (_pnc_getconditions $arg1)
	looplist cn (listclients 1) [
		// if (< (listfind c $checks [do $c]) 0)
		if (= (checks) 0) [
			pn = (getclientname $cn)
			list = (concat $list (concatword (_pnc_cleanstring $pn) $_pnc_tag_delim $cn))
			pn2 = (_pnc_removeclantag $pn)
			if (!=s $pn2 $pn) [
				list = (concat $list (concatword (_pnc_cleanstring $pn2) $_pnc_tag_delim $cn))
			]
		]
	]
	result $list
]

// _pnc_gettag [ANYTHING'~']<CN>
// Returns CN.
_pnc_gettag = [
	local pos
	pos = (strstr $arg1 $_pnc_tag_delim)
	while [> $pos -1] [
		arg1 = (substr $arg1 (+ $pos 1))
		pos = (strstr $arg1 $_pnc_tag_delim)
	]
	result $arg1
]

// /playernamecomplete <ALIAS> <COMMAND> [<FLAGS>] [<ARGNUM>]
//   Create <ALIAS> which calls <COMMAND> supporting tab-completion of
//   connected players.
//
// The usage of <ALIAS> is:
//   /<ALIAS> [<ANYTHING>~]<CN> <ARGS>{ARGNUM-1 times} [<ARGS>...]
//
//   <CN> is passed as the first argument to <COMMAND>.
//   The renaming arguments are passed directly to <COMMAND>.
//
//   <CN> is passed as the <ARGNUM>'th argument to command.
//   <ALIAS> has to be called with at least <ARGNUM> arguments.
//   Arguments higher than <ARGNUM> are passed after <CN>.
//   If <ARGNUM> is missing, it counts as 1.
//   When <ALIAS> is called with less than <ARGNUM> arguments, they are
//   replaced by empty strings.
//
// Tab-completion:
//   The first argument of <ALIAS> can be tab-completed using the names of
//   the players that were connected when this function was called.
//
//   <FLAGS> are flags for the command _pnc_checkplayer. They specify
//   the conditions a player has to meet to appear in the completion.
//
//   Every player name in the completion is cleaned from any character
//   that is not in _pnc_allowedchars.
//   After that, every character it the name that appears in _pnc_searchchars
//   is replaced with the character at the same position in _pnc_replacechars.
//
// Note:
//   The ~ delimiter can be changed by changing _pnc_tag_delim. This does not
//   work in runtime, and the script needs to be re-executed.
//   The completion also works when the name contains the delimiter, as the
//   last occurrence is used, but it does NOT work when the client number
//   contains the delimiter.
//   If there is no delimiter, nothing is cut from the argument. That means
//   you can also just write the cn instead of using tab-completion.
//
// Example:
//   /playernamecomplete d dosomething "PSE" 2
//
//   Creates command /d with the usage:
//   /d [<ANYTHING>~]<CN> <ARG1> [<ARGS>...]
//
//   The first argument can be tab-completed with the names of all players that
//   are NOT the player himself, are NOT spectators and are in the player's team.
//
//   /d calls /dosomething <ARG1> <CN> [<ARGS>...]
//   Where ARGS are the remaining arguments after ARG1.
//   Example of d:
//   /d foo~42 0 evil 5
//   would call
//   /dosomething 0 42 evil 5
playernamecomplete = [
	local cnarg
	cnarg = (? (>= $numargs 4) $arg4 1)
	if (< $cnarg 1) [
		error "ARGNUM needs to be 1 or greater."
	] [
		$arg1 = [ local cmd cnarg; cmd = [@@arg2]; cnarg = [@@cnarg]; do $_pnc_body ]
		listcomplete $arg1 (_pnc_getplayers $arg3)
	]
]

// Not actually a function, but used in wrapper functions.
_pnc_body = [
	local cn args argi
	cn = (_pnc_gettag $arg1)
	// create call like [[dosomething] $arg2 $cn $arg3 $arg4]
	do [[@@cmd] @(
		if (> $numargs 0) [
			argi = 1
			loopconcat i (max $numargs $cnarg) [
				if (= $i (- $cnarg 1)) [
					concat $args [$cn]
				] [
					argi = (+ $argi 1)
					concat $args [$arg@argi]
				]
			]
		]
	)]
]

playernameclantagadd = [
	cond (= $numargs 0) [
		inputcommand "" [playernameclantagadd $commandbuf] "add clantag>"
	] [< (indexof $_pnc_list_clantags $arg1) 0] [
		_pnc_list_clantags = (concat $_pnc_list_clantags (escape $arg1))
	]
]

playernameclantagdel = [
	cond (= $numargs 0) [
		inputcommand "" [playernameclantagdel $commandbuf] "delete clantag>"
	] [< (indexof $_pnc_list_clantags $arg1) 0] [
		_pnc_list_clantags = (listdel $_pnc_list_clantags (escape $arg1))
	]
]

// update-method example:
//
// _pnc_update = [
//    // /f follow player, list non-spectators and not the followed one
//    playernamecomplete f     follow     "SF"
//    // /ig ignore player, list non-ignored players and not the player himself
//    playernamecomplete ig    ignore     "PI"
//    // /unig unignore player, list ignored players
//    playernamecomplete unig  unignore   "i"
//    // /ki kick player, list players with lesser privileges and not the player himself (rather redundant)
//    playernamecomplete ki    kick       "lP"
// ]

// vim:set sw=4 ts=4 sts=0 noet sta sr ft=cube fdm=syntax:
