// File:		localstats.cfg
// Author:		FerreusRemedium
// Created:		2013-03-13
// Last Change: 2013-03-17





// ==================
//  Helper Functions
// ==================



createine = [ if (=s (getalias $arg1) "") [ $arg1 = $arg2 ] ]

+= = [ $arg1 = (+ (getalias $arg1) $arg2); result $$arg1 ]
++ = [ $arg1 = (+ (getalias $arg1) 1); result $$arg1 ]

// Checks whether the gametype is neither insta nor effic.
_ls_m_normal = [ && [! (m_insta $arg1)] [! (m_efficiency $arg1)] ]

// Ensures 2 digits by prepending zeros.
_ls_zeros = [ concatword (? (< $arg1 10) 0) $arg1 ]
_ls_zeros2 = [ concatword (loopconcatword i (- $arg2 (strlen $arg1)) [result 0]) $arg1 ]

// _ls_display_byindex <PREFIX> <COUNTER> <FLAGS>
_ls_display_byindex = [
	local disp
	disp = (_ls_getcounter $arg1 $arg2 $arg3)
	if (_ls_f_isnumeric $arg3) [
		|| [result $disp] [result $_ls_nostats_string]
	] [
		if (=s $disp "") [
			result $_ls_nostats_string
		] [
			result $disp
		]
	]
]

// _ls_round <F>
// Rounds float F to int.
_ls_round = [
	if (>= $arg1 0) [
		+ (+f $arg1 0.5) 0
	] [
		+ (-f $arg1 0.5) 0
	]
]

// _ls_round <F> <MUL>
// Rounds float F to a number of places.
// F:     The number.
// MUL:   10 to the number of decimal places'th power. (e.g. 100 for 2 places)
_ls_round2 = [
	divf (_ls_round (*f $arg1 $arg2)) $arg2
]


// _ls_getstrtimesub <SECONDS> <SUFFIX> <DIV> [<MOD>] [<N>]
// Returns ((SECONS / DIV) % MOD) and appends SUFFIX.
// If the number without MOD equals or is greater than DIV, it ensures N digits (default: 2).
// If the number is zero, it returns an empty string.
// If MOD is omitted or 0 it counts as a really big number.
_ls_getstrtimesub = [
	local s
	if (< $arg1 $arg3) [
		result ""
	] [
		if $arg4 [
			if (>= $arg1 (* $arg3 $arg4)) [
				concatword (_ls_zeros2 (mod (div $arg1 $arg3) $arg4) (|| [result $arg5] [result 2])) $arg2
			] [
				concatword (mod (div $arg1 $arg3) $arg4) $arg2
			]
		] [
			concatword (div $arg1 $arg3) $arg2
		]
	]
]

// _ls_getstrtime <SECONDS>
// Returns a string-representation of a time.
// SECONDS: The time in seconds.
_ls_getstrtime = [
	// TODO this is crazy. maybe not optimal.
	//concatword (_ls_getstrtimesub $arg1 "y" 31536000) (_ls_getstrtimesub $arg1 "d" 86400 365 1) (_ls_getstrtimesub $arg1 "h" 3600 24 1) (_ls_getstrtimesub $arg1 "m" 60 60) (_ls_getstrtimesub $arg1 "s" 1 60)
	concatword (_ls_getstrtimesub $arg1 "h" 3600) (_ls_getstrtimesub $arg1 "m" 60 60) (_ls_getstrtimesub $arg1 "s" 1 60)
]





// =======
//  Lists
// =======



// Normal counters
// Shall not be changed after exec
//                         0        1         2          3               4              5             6        7           8                 9       10
_ls_list_counters       = "getfrags getdeaths _ls_gettks _ls_getsuicides gettotaldamage gettotalshots getflags _ls_gettime _ls_getroundcount mapname getmode"
_ls_list_counters_flags = "0x2      0x2       0x2        0x2             0x2            0x2           0x2      0x2         0x2               0x1     0x3"
_ls_flag_counter_static = 0x1
_ls_flag_counter_numeric = 0x2
_ls_mask_counter = 0xFF

// TODO remove
//// getters for static match data
//_ls_list_static   = "mapname"

// Functions called to display the counters
_ls_list_displays         = "Mode:        Map: Frags: Deaths: Tks: Suicides: Damage: Shots: Scores: Time:        Games: Accuracy:        K/D:        K/M:"
_ls_list_displays_getters = "_ls_dispmode #9   #0     #1      #2   #3        #4      #5     #6      _ls_disptime #8     _ls_dispaccuracy _ls_dispkpd _ls_dispkpm"
_ls_list_displays_masks   = "0xC          0xC  0xF    0xF     0xF  0xF       0xF     0xF    0xF     0xF          0x1    0xF              0xF         0xF"
_ls_flag_showin_total = 0x1
_ls_flag_showin_current = 0x2
_ls_flag_showin_history = 0x4
_ls_flag_showin_apply = 0x8
_ls_mask_showin = 0xFF

// TODO add bitmask list for selecting where displays are shown

// TODO add display accessors for static map data (consider "*n")

// Gamemode filters
_ls_list_filters = "ffa team . . . insta . effic . . . ctf . protect . collect . hold . . . capture . regen . tactics . sp . dmsp . edit"
_ls_list_filters_checks = "m_teammode . m_insta m_efficiency . m_ctf m_protect m_collect m_hold . m_capture m_regencapture m_tactics m_sp m_dmsp m_edit"

// Included gamemodes
// NOTE removed demo
_ls_list_modes = "-3 -2 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22"
// not used yet
_ls_list_modes_names = "sp dmsp ffa edit teamplay instagib instateam effic efficteam tactics tacteam capture regen ctf instactf protect instaprotect hold instahold efficctf efficprotect effichold collect instacollect efficcollect"

// teammodes:   ffa teamplay
// teamplay:    none ctf protect hold collect
// gearmodes:   none insta effic
// uniqueffa:   tactics
// uniqueteam:  tacteam capture regen

createine _ls_last_isconnected (isconnected)
createine _ls_last_mode (getmode)
createine _ls_last_mapname (mapname)
createine _ls_last_timeremaining (timeremaining)
createine _ls_last_deaths (getdeaths)

createine _ls_stats_gameindex 0
createine _ls_setting_save_game 1
createine _ls_setting_save_reactivate 1

createine _ls_current_tks 0
createine _ls_current_suicides 0

// History vars
_ls_history_max = 30
createine _ls_history_count 0

_ls_pollinterval = 100
_ls_tkpollinterval = 20

_ls_nostats_string = "-"





// ==============================
//  Teamkill and Suicide polling
// ==============================



// stop already running versions
_ls_polltksd = []
sleep (* 2 $_ls_tkpollinterval) [
	// polls frags and deaths to count tks
	_ls_polltksd = [
		sleep $_ls_tkpollinterval [
			local fcmp
			fcmp = (- @(getfrags) (getfrags))
			if (> $fcmp 0) [
				local dcmp
				dcmp = (- (getdeaths) @@(getdeaths))
				//echo fcmp= $fcmp dcmp= $dcmp
				if (&& [>= $dcmp 0] [<= (timeremaining) @@@(timeremaining)]) [ // in case the game has ended
					+= _ls_current_suicides $dcmp
					+= _ls_current_tks (- $fcmp $dcmp)
					_ls_addstats START (indexof $_ls_list_counters "getfrags") (- 0 $fcmp)
					// XXX DEBUG
					echo suicides: $_ls_current_suicides  tks: $_ls_current_tks
				]
			]
			_ls_polltksd
		]
	]
	_ls_polltksd
]





// =======
//  Flags
// =======



// _ls_getcounterflags <COUNTER>
_ls_getcounterflags = [
	at $_ls_list_counters_flags $arg1
]

// _ls_f_isnumeric <FLAGS>
_ls_f_isnumeric = [
	& $arg1 $_ls_flag_counter_numeric
]

// _ls_f_isnumeric <FLAGS>
_ls_f_isstatic = [
	& $arg1 $_ls_flag_counter_static
]





// ================
//  Stats counting
// ================



// _ls_getprefixvarnames <PREFIX>
// Returns names for all counters with given prefix
_ls_getcounternames = [
	loopconcat c (listlen $_ls_list_counters) [ _ls_getcountername $arg1 $c ]
]

// _ls_getcountername <PREFIX> <COUNTER>
// Returns a variable name of a counter with given prefix.
// PREFIX:  Prefix of the variable.
// TAG:     The tag or gamemode id.
// COUNTER: The counter index.
_ls_getcountername = [
	concatword $arg1 _ $arg2
]

// _ls_getcounterraw <PREFIX> <COUNTER>
_ls_getcounterraw = [
	getalias (_ls_getcountername $arg1 $arg2)
]

// _ls_getcounter <PREFIX> <COUNTER> [<FLAGS>]
_ls_getcounter = [
	if (=s $arg3 "") [
		arg3 = (_ls_getcounterflags $arg2)
	]
	if (& $arg3 $_ls_flag_counter_numeric) [
		|| [_ls_getcounterraw $arg1 $arg2] [result 0]
	] [
		_ls_getcounterraw $arg1 $arg2
	]
]

// _ls_setcounterraw <PREFIX> <COUNTER> <VALUE>
_ls_setcounterraw = [
	(_ls_getcountername $arg1 $arg2) = $arg3
	//echo (_ls_getcountername $arg1 $arg2) = $arg3
]

// _ls_setcounter <PREFIX> <COUNTER> <VALUE> [<FLAGS>]
_ls_setcounter = [
	if (=s $arg4 "") [
		arg4 = (_ls_getcounterflags $arg2)
	]
	if (& $arg3 $_ls_flag_counter_numeric) [
		_ls_setcounterraw $arg1 $arg2 (|| [result $arg3] [result ""])
	] [
		_ls_setcounterraw $arg1 $arg2 $arg3
	]
]

// _ls_addcounter <PREFIX> <COUNTER> <VALUE> [<FLAGS>]
_ls_addcounter = [
	if (=s $arg4 "") [
		arg4 = (_ls_getcounterflags $arg2)
	]
	if (_ls_f_isnumeric $arg4) [
		if $arg3 [
			local varname
			varname = (_ls_getcountername $arg1 $arg2)
			+= $varname $arg3
			$varname = (|| [result $$varname] [result ""])
		]
	] [
		error (format "Counter %1 is not numeric." $arg2)
	]
]

//// _ls_getcounterprefix <MODE>
//_ls_getcounterprefix = [
//    concatword _ls_stats_ $arg1
//]

//// _ls_getcountername <PREFIX> <COUNTER>
//// Returns the variable name of a counter.
//_ls_getcountername = [
//    /_ls_getprefixvarname (_ls_getcounterprefix $arg1) $arg2
//    //concatword _ls_stats_ $arg1 _ $arg2
//]

// _ls_getstatsprefix <TAG>
_ls_getstatsprefix = [
	concatword _ls_stats_ $arg1
]

// _ls_setstats <TAG> <COUNTER> <VALUE> [<FLAGS>]
// Sets a counter to a value.
// TAG:     The tag or gamemode id.
// COUNTER: The counter index.
// VALUE:   The value to add.
_ls_setstats = [
	_ls_setcounter (_ls_getstatsprefix $arg1) $arg2 $arg3 $arg4
	//local varname
	//varname = (_ls_getcountername $arg1 $arg2)
	//$varname = $arg3
	//if (|| [! (& $arg4 $_ls_flag_counter_numeric)] [result $$varname]) [] [$varname = ""]
]

// XXX trash
//// _ls_getprefixcounter <PREFIX> <COUNTER> <FLAGS>
//_ls_getprefixcounter = [
//    if (& $arg3 $_ls_flag_counter_numeric) [
//        || [getalias (_ls_getcountername $arg1 $arg2)] [result 0]
//    ] [
//        getalias (_ls_getcountername $arg1 $arg2)
//    ]
//]

// _ls_getstats <TAG> <COUNTER> [<FLAGS>]
// Returns value of a counter or 0 if it does not exist yet
// Same args as /_ls_getcountername
_ls_getstats = [
	_ls_getcounter (_ls_getstatsprefix $arg1) $arg2 $arg3
	//if (& $arg3 $_ls_flag_counter_numeric) [
	//    || [getalias (_ls_getcountername $arg1 $arg2)] [result 0]
	//] [
	//    getalias (_ls_getcountername $arg1 $arg2)
	//]
]

// _ls_addstats <TAG> <COUNTER> <VALUE> [<FLAGS>]
// Adds a value to a counter.
// TAG:     The tag or gamemode id.
// COUNTER: The counter index.
// VALUE:   The value to add.
_ls_addstats = [
	//// XXX DEBUG
	//echo 1: $arg1 2: $arg2 3: $arg3 4: $arg4
	_ls_addcounter (_ls_getstatsprefix $arg1) $arg2 $arg3 $arg4
	//if (&& [& $arg4 $_ls_flag_counter_numeric] [result $arg3]) [
	//    local varname
	//    varname = (_ls_getcountername $arg1 $arg2)
	//    += $varname $arg3
	//]
]

// _ls_getstats_current <COUNTER> [<FLAGS>]
// Returns COUNTER for the current game.
_ls_getstats_current = [
	if (=s $arg2 "") [
		arg2 = (_ls_getcounterflags $arg1)
	]
	if (& $arg2 $_ls_flag_counter_static) [
		_ls_getstats START $arg1 $arg2
	] [
		- (_ls_getstats TMP $arg1 $arg2) (_ls_getstats START $arg1 $arg2)
	]
]





// ==========
//  Displays
// ==========



// _ls_getdisplayflags <DISPLAY>
// TODO move
_ls_getdisplayflags = [
	at $_ls_list_displays_masks $arg1
]

// _ls_getdisplaytitle <DISPLAY>
_ls_getdisplaytitle = [
	at $_ls_list_displays $arg1
]

// _ls_getdisplaygetter <DISPLAY>
_ls_getdisplaygetter = [
	at $_ls_list_displays_getters $arg1
]

// _ls_getdisplayvalue <PREFIX> <DISPLAY>
_ls_getdisplayvalue = [
	(_ls_getdisplaygetter $arg2) $arg1
]

// _ls_loopdisplays <VARCAPTION> <VARDISP> <PREFIX> <MASK> <ACTION>
_ls_loopdisplays = [
	local mask action $arg1 $arg2
	local @(loopconcat i (listlen $_ls_list_counters) [concatword # $i])

	if (>= $numargs 5) [
		mask = $arg4
		action = $arg5
	] [
		mask = $_ls_mask_showin
		action = $arg4
	]

	// create #n display functions
	loop i (listlen $_ls_list_counters) [
		// _ls_display_byindex <PREFIX> <COUNTER> <FLAGS>
		(concatword # $i) = (concatword _ls_display_byindex " ^"" $arg3 "^" " $i " " (_ls_getcounterflags $i))
	]
	loopconcatword d (listlen $_ls_list_displays) [
		if (& (_ls_getdisplayflags $d) $mask) [
			$arg1 = (_ls_getdisplaytitle $d)
			$arg2 = (_ls_getdisplayvalue $arg3 $d)
			action
		]
	]
]





// =========
//  History
// =========



// _ls_gethistoryvarnames <ENTRY>
_ls_gethistoryvarnames = [ _ls_getcounternames (concatword _ls_history_ $arg1) ]

_ls_gethistoryprefix = [
	concatword _ls_history_ $arg1
]

// TODO trash
//// _ls_gethistoryvarname <ENTRY> <COUNTER>
//_ls_gethistoryvarname = [
//    _ls_getcountername (_ls_gethistoryprefix $arg1) $arg2
//]


// TODO use
// TODO move
// _ls_getnumber <VARNAME>
_ls_getnumber = [
	|| [getalias $arg1] [result 0]
]

// TODO use
// TODO move
_ls_setnumber = [
	$arg1 = $arg2
	if $$arg1 [] [$arg1 = ""]
]

// _ls_gethistorystats <ENTRY> <COUNTER> [<FLAGS>]
_ls_gethistorystats = [
	_ls_getcounter (_ls_gethistoryprefix $arg1) $arg2 $arg3
	//local varname
	//if (< $numargs 3) [
	//    arg3 = (_ls_getcounterflags $arg2)
	//]
	//if (& $arg3 $_ls_flag_counter_numeric) [
	//    _ls_getnumber (_ls_gethistoryvarname $arg1 $arg2)
	//] [
	//    getalias (_ls_gethistoryvarname $arg1 $arg2)
	//]
]

// _ls_sethistorystats <ENTRY> <COUNTER> <VALUE> [<FLAGS>]
_ls_sethistorystats = [
	_ls_setcounter (_ls_gethistoryprefix $arg1) $arg2 $arg3 $arg4
	//local varname
	//if (< $numargs 4) [
	//    arg4 = (_ls_getcounterflags $arg2)
	//]
	//varname = (_ls_gethistoryvarname $arg1 $arg2)
	//$varname = $arg3
	//if (|| [! (& $arg4 $_ls_flag_counter_numeric)] [result $$varname]) [] [$varname = ""]
]

// _ls_shifthistory
_ls_shifthistory = [
	_ls_history_count = (min $_ls_history_count (- $_ls_history_max 1))
	loop i $_ls_history_count [
		i = (- $_ls_history_count $i)
		loop j (listlen $_ls_list_counters) [
			flags = (_ls_getcounterflags $j)
			_ls_sethistorystats $i $j (_ls_gethistorystats (- $i 1) $j $flags) $flags
		]
	]
	++ _ls_history_count
]

// _ls_ismodeallowed
_ls_ismodeallowed = [
	>= (indexof $_ls_list_modes $arg1) 0
]

// _ls_apply
// Adds temporary counters to permanent counters
_ls_apply = [
	local addit value flags @(_ls_getcounternames end)
	addit = (_ls_ismodeallowed $_ls_last_mode)
	// XXX DEBUG
	echo addit= $addit mode= $_ls_last_mode
	if $addit [
		if $_ls_setting_save_game [
			// reset next history entry
			_ls_shifthistory
			// TODO try removing
			looplist v (_ls_gethistoryvarnames 0) [
				$v =
			]
		]
		loop c (listlen $_ls_list_counters) [
			flags = (_ls_getcounterflags $c)
			value = (_ls_getstats_current $c $flags)
			_ls_setcounter end $c $value $flags
			if $_ls_setting_save_game [
				if (! (_ls_f_isstatic $flags)) [
					_ls_addstats $_ls_last_mode $c $value $flags
				]
				_ls_sethistorystats 0 $c $value $flags
				// XXX DEBUG
				echo _ls_addstats $_ls_last_mode $c $value $flags
			]
			//varname = (_ls_getcountername end $c)
			//$varname = (_ls_getstats_current $c)
			//if $_ls_setting_save_game [
			//    _ls_addstats $_ls_last_mode $c $$varname
			//    _ls_sethistorystats $c $$varname
			//    // XXX DEBUG
			//    echo _ls_addstats $_ls_last_mode $c "(-" (_ls_getstats TMP $c) (_ls_getstats START $c) ")=" $$varname
			//]
		]
		// TODO move to hook
		// TODO use variable for delay time
		sleep (? (isconnected) 2000 0) [
			echo @(concatword "^"" "^f0Stats of last match" (? $_ls_setting_save_game "" " (not saved)") ":" (
				_ls_loopdisplays caption disp end $_ls_flag_showin_apply [
					if (!=s $disp $_ls_nostats_string) [
						concatword " " $caption " ^fs^f2" $disp "^fr"
					]
				]
			) "^"")
		]
		// TODO move to hook
		if $_ls_setting_save_reactivate [
			savestats 1
		]
	]
]

// _ls_apply_tmp <TAG>
// saves current match stats to temporary vars
// TAG: TMP or START
_ls_apply_tmp = [
	local flags
	loop c (listlen $_ls_list_counters) [
		flags = (_ls_getcounterflags $c)
		_ls_setstats $arg1 $c ((at $_ls_list_counters $c)) $flags
	]
]

// TODO used?
_ls_resetcounters = [
	loop c (listlen $_ls_list_counters) [
		flags = (_ls_getcounterflags)
		_ls_setstats START $c "" $flags
		_ls_setstats TMP $c "" $flags
	]
]

// _ls_isinlastgame 
// checks whether the last game has ended
// FIXME
// Does not return 0 if the game is changed when all are true:
//  1. The game is switched directly without leaving the game to the main menu
//  2. The time remaining in the new game is less than in the old game
//  3. The player did not have any deaths in the old game
//  4. The new game is on the same mode as the old game
// TODO use _ls_getstats_current
_ls_isinlastgame = [
	&& [&& [= (isconnected) $_ls_last_isconnected] [&& [<= (timeremaining) $_ls_last_timeremaining] [timeremaining]]] [&& [>= (getdeaths) $_ls_last_deaths] [= (getmode) $_ls_last_mode]]
]

// _ls_savegameinfo
// saves information about current match for /_ls_changedgame
// TODO use _ls_getstats_current
_ls_savegameinfo = [
	_ls_last_mode = (getmode)
	_ls_last_isconnected = (isconnected)
	_ls_last_mapname = (mapname)
	_ls_last_timeremaining = (timeremaining)
	_ls_last_deaths = (getdeaths)
]

// _ls_onroundended
// Called after a game has ended.
_ls_ongameended = [
	// XXX DEBUG
	echo "round ended"
	_ls_apply
	++ _ls_stats_gameindex
	_ls_current_tks = 0
	_ls_current_suicides = 0

	if (!=s (getalias ongameended) "") [
		ongameended
	]
	_ls_updategui_total
]

_ls_ongamestarted = [
	// XXX DEBUG
	echo "round started"
	if (!=s (getalias ongamestarted) "") [
		ongamestarted
	]
	_ls_apply_tmp START
	_ls_updategui_total
]

// _ls_onstatscheck
// Called repeatedly during the game.
_ls_onstatscheck = [
	_ls_savegameinfo
	_ls_apply_tmp TMP
]

createine _ls_last_ingame 0

// _ls_pollstatsd
// Calls /_ls_onroundended when a round has ended and
// keeps calling /_ls_onstatscheck repeatedly.
_ls_pollstatsd = [] // stop already running instances
sleep (* 2 $_ls_pollinterval) [
	_ls_pollstatsd = [
		local ingame
		ingame = (_ls_isinlastgame)
		if (!= $ingame $_ls_last_ingame) [
			if $ingame [
				_ls_ongamestarted
			] [
				_ls_ongameended
			]
		]
		_ls_last_ingame = $ingame
		_ls_onstatscheck
		sleep $_ls_pollinterval [_ls_pollstatsd]
	]
	_ls_pollstatsd
]





// =================
//  Special getters
// =================



// Returns tks counted by _ls_polltksd
_ls_gettks = [
	$_ls_current_tks
]

// Returns suicides counted by _ls_polltksd
_ls_getsuicides = [
	$_ls_current_suicides
]

// _ls_gettime
// Counts from negative to zero.
_ls_gettime = [
	if (isconnected) [- 0 (timeremaining)] [result 0]
]

// _ls_getroundcount
// Returns whether the game has been longer than 60 seconds.
_ls_getroundcount = [
	>= (_ls_getstats_current @(indexof $_ls_list_counters "_ls_gettime")) 60
	// check does not work when START is applied. this resets it. hax pls.
	@(_ls_getcountername START (indexof $_ls_list_counters "_ls_getroundcount")) =
]





// ===================
//  Display Functions
// ===================


// TODO move
// _ls_findcounter <GETTER>
// Returns a counter index by getter.
_ls_findcounter = [
	indexof $_ls_list_counters $arg1
]

// _ls_findgetcounter <PREFIX> <GETTER>
_ls_findgetcounter = [
	_ls_getcounter $arg1 (_ls_findcounter $arg2)
]

// _ls_disptime <PREFIX>
_ls_disptime = [
	arg2 = (_ls_getstrtime (_ls_findgetcounter $arg1 "_ls_gettime"))
	// TODO numeric display flag?
	if (!=s $arg2 "") [
		result $arg2
	] [
		result $_ls_nostats_string
	]
]

// _ls_calcaccuracy <PREFIX>
// Returns accuracy.
// COUNTERLIST: List of total counters in same order as in _ls_list_counters_getters.
_ls_dispaccuracy = [
	local damage shots
	damage = (_ls_findgetcounter $arg1 "gettotaldamage")
	if $damage [
		shots = (_ls_findgetcounter $arg1 "gettotalshots")
		concatword (+ (*f (divf $damage $shots) 100) 0) "%"
	] [
		result $_ls_nostats_string
	]
]

// _ls_calckpd <COUNTERLIST>
// Returns frags per death.
// COUNTERLIST: List of total counters in same order as in _ls_list_counters_getters.
_ls_dispkpd = [
	local frags deaths
	frags = (_ls_findgetcounter $arg1 "getfrags")
	if $frags [
		deaths = (_ls_findgetcounter $arg1 "getdeaths")
		_ls_round2 (divf $frags (max $deaths 1)) 100
	] [
		result $_ls_nostats_string
	]
]

// _ls_calckpm <COUNTERLIST>
// Returns frags per minute.
// COUNTERLIST: List of total counters in same order as in _ls_list_counters_getters.
_ls_dispkpm = [
	local frags minutes
	//frags = (at $arg1 (indexof $_ls_list_counters "getfrags"))
	frags = (_ls_findgetcounter $arg1 "getfrags")
	minutes = (divf (_ls_findgetcounter $arg1 "_ls_gettime") 60)
	if (&& [result $frags] [result $minutes] ) [
		_ls_round2 (divf $frags (maxf $minutes 0.01)) 100
	] [
		result $_ls_nostats_string
	]
]

_ls_dispmode = [
	local m i
	m = (_ls_findgetcounter $arg1 "getmode")
	i = (indexof $_ls_list_modes $m)
	if (< $i 0) [
		result $_ls_nostats_string
	] [
		at $_ls_list_modes_names $i
	]
]





// ===========
//  GUI stuff
// ===========



createine _ls_filter_enabled 0

_ls_getfiltername = [
	concatword _ls_filter_ $arg1 _ $arg2
]

// _ls_guifilter <FILTER>
// Adds filter controls to the gui.
_ls_guifilter = [
	local ctrls falsetext truetext
	falsetext = (at $_ls_list_filters (<< $arg1 1))
	truetext = (at $_ls_list_filters (+ (<< $arg1 1) 1))

	ctrls = [guicheckbox "on" @(_ls_getfiltername $arg1 0) 1 0 [_ls_updategui_total]]
	cases (+ (!=s $truetext ".") (!=s $falsetext ".")) 2 [
		createine (_ls_getfiltername $arg1 0) 0
		createine (_ls_getfiltername $arg1 1) 1
		ctrls = (concat $ctrls [
			guistrut 2
			guiradio @falsetext @(_ls_getfiltername $arg1 1) 0 [
				(_ls_getfiltername @@arg1 0) = 1
				_ls_updategui_total
			]
			guistrut 2
			guiradio @truetext @(_ls_getfiltername $arg1 1) 1 [
				(_ls_getfiltername @@arg1 0) = 1
				_ls_updategui_total
			]
		])
		result [guilist [@@ctrls];]
	] 1 [
		createine (_ls_getfiltername $arg1 0) 0
		if (!=s $falsetext ".") [
			createine (_ls_getfiltername $arg1 1) 1
			ctrls = (concat $ctrls [
				guistrut 2
				guicheckbox @falsetext @(_ls_getfiltername $arg1 1) 0 1 [
					(_ls_getfiltername @@arg1 0) = 1
					_ls_updategui_total
				]
			])
		] [
			createine (_ls_getfiltername $arg1 1) 0
			ctrls = (concat $ctrls [
				guistrut 2
				guicheckbox @truetext @(_ls_getfiltername $arg1 1) 1 0 [
					(_ls_getfiltername @@arg1 0) = 1
					_ls_updategui_total
				]
			])
		]
		result [guilist [@@ctrls];]
	] 0 [
		(_ls_getfiltername $arg1 0) =
		(_ls_getfiltername $arg1 1) =
		result [guibar;]
	]
]

// _ls_genfiltercontrols
// Adds controls for all filters to the gui.
_ls_genfiltercontrols = [
	loopconcat c (listlen $_ls_list_filters_checks) [
		_ls_guifilter $c
	]
]

_ls_checkfilter = [
	|| [! $_ls_filter_enabled] [
		local useit
		useit = 1
		loop i (listlen $_ls_list_filters_checks) [
			if $useit [
				if (getalias (_ls_getfiltername $i 0)) [
					useit = (= $(_ls_getfiltername $i 1) ((at $_ls_list_filters_checks $i) $arg1))
				]
			]
		]
		result $useit
	]
]

// TODO add flags param?
// _ls_gettotalfiltered <COUNTER>
// Returns total value of COUNTER filtered by gui controls
_ls_gettotalfiltered = [
	local useit total
	if (_ls_f_isnumeric (_ls_getcounterflags $arg1)) [
		looplist m $_ls_list_modes [
			if (_ls_checkfilter $m) [
				// FIXME derp, gui does not get updated (yet)
				if $_ls_setting_save_game [
					if (= $m (getmode)) [
						+= total (_ls_getstats_current $arg1)
					]
				]
				+= total (_ls_getstats $m $arg1)
			]
		]
		|| [result $total] [result 0]
	] [
		result ""
	]
]

// _ls_genstatselements <FLAGS>
// Returns gui elements for all counters.
_ls_genstatselements = [
	local . i varname list @(_ls_getcounternames total)
	loop c (listlen $_ls_list_counters) [
		(_ls_getcountername total $c) = (_ls_gettotalfiltered $c)
	]

	_ls_loopdisplays caption disp total $arg1 [
		result [guilist [
			guitext @@caption 0
			guispring
			guitext @@(concatword "^"" $disp "^"") 0
		];]
	]
]


// Current stats gui
newgui _ls_current [
	local @(_ls_getcounternames current)
	loop c (listlen $_ls_list_counters) [
		(_ls_getcountername current $c) = (_ls_getstats_current $c)
	]
	// TODO try _ls_genstatselements
	_ls_loopdisplays caption disp current $_ls_flag_showin_current [
		guilist [
			guitext $caption 0
			guispring
			guitext $disp 0
		]
	]
	guispring
	guistrut 1
	if $_ls_setting_save_game [] [
		guicheckbox "Auto-reactivate" _ls_setting_save_reactivate 1 0
	]
	guicheckbox "Save current game" _ls_setting_save_game 1 0 [_ls_updategui_total]
	guispring
	guibutton "Back" [cleargui 1] "arrow_bw"
] "Current game stats"

// TODO move
_ls_gethistoryvarprefix = [
	concatword _ls_history_ $arg1
]

// Creates controls showing the history.
_ls_genhistoryelements = [
	local s count c @(loopconcat d (listlen $_ls_list_displays) [concatword col_ $d])
	getcolvarname = [concatword col_ $arg1]
	loop i (+ $_ls_history_count 1) [
		c = 0
		i = (- $i 1)
		_ls_loopdisplays caption disp (_ls_gethistoryvarprefix $i) $_ls_flag_showin_history [
			if (< $i 0) [
				(getcolvarname $c) = [guilist [guispring; guistrut 1; guitext @@caption 0;];]
			] [
				(getcolvarname $c) = (concatword $(getcolvarname $c) [guilist [guispring; guistrut 1; guitext @@disp 0];])
			]
			++ c
		]
	]
	result [guilist [@@(loopconcatword c (listlen $_ls_list_displays) [
		result [guilist [@@(result $(getcolvarname $c))];]
	])]]
]

_ls_creategui_history = [
	result [guistayopen [
		@@(_ls_genhistoryelements)
	]]
]

_ls_updategui_history = [
	newgui _ls_history (_ls_creategui_history) "History"
]
_ls_updategui_history

// _ls_gentotalgui
// Creates the gui and returns the body.
_ls_gentotalgui = [
	result [guistayopen [
		guilist [
			@@@(if $_ls_filter_enabled [
				result [
					guilist [
						@@(_ls_genfiltercontrols)
					]
					guibar
				]
			])
			guilist [
				@@@@(_ls_genstatselements $_ls_flag_showin_total)
				guispring
				guicheckbox "Filter" _ls_filter_enabled 1 0 [_ls_updategui_total]
				guispring
				@@@@(if $_ls_setting_save_game [] [
					result [guicheckbox "Auto-reactivate" _ls_setting_save_reactivate 1 0]
				])
				guicheckbox "Save current game" _ls_setting_save_game 1 0 [_ls_updategui_total]
				guibutton "Current game stats" [showgui _ls_current]
			]
		]
	]]
]

// _ls_updategui_total
// Recreates the gui.
_ls_updategui_total = [
	newgui _ls_filtered (_ls_gentotalgui) "Local Stats"
]
_ls_updategui_total





// ================
//  User functions
// ================



savestatsreapply = [
	if $numargs [
		_ls_setting_save_reactivate = (!= $arg1 0)
	]
	result $_ls_setting_save_reactivate
]

savestats = [
	if (&& [result $numargs] [!= (!= $arg1 0) $_ls_setting_save_game]) [
		_ls_setting_save_game = (!= $arg1 0)
		_ls_updategui_total
	]
	result $_ls_setting_save_game
]

// localstats
// Updates and shows the gui.
localstats = [ _ls_updategui_total; showgui _ls_filtered ]
localstatshistory = [ _ls_updategui_history; showgui _ls_history ]
localstatscurrent = [ showgui _ls_current ]





// =========
//  The end
// =========



// vim:set sw=4 ts=4 sts=0 noet sta sr ft=cube fdm=syntax:
